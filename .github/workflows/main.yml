name: CI/CD avec images Docker et Docker Compose

env:
  SERVER_PRODUCTION_USER: "root"
  SERVER_STAGING_USER: "root"
  SERVER_PRODUCTION_IP: "51.77.244.180"
  SERVER_STAGING_IP: "51.77.244.180"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  tests_frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in fs mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        trivy-config: trivy.yaml

    - name: installer Node.js
      uses: actions/setup-node@v4
      with:
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: installer les dépendances
      run: npm ci --prefer-offline

    - name: vérifie les vulnérabilités
      run: npm audit fix
    - name: vérifie le code
      run: npm run lint

  tests_backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: node-api
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in fs mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        trivy-config: trivy.yaml

    - name: installer Node.js
      uses: actions/setup-node@v4
      with:
        cache: 'npm'
        cache-dependency-path: node-api/package-lock.json

    - name: installer les dépendances
      run: npm ci --prefer-offline

    - name: exécute les tests unitaires
      run: npm run test:ci

    - name: vérifie le code
      run: npm run lint

    - name: vérifie les vulnérabilités
      run: npm audit fix

    - name: Upload du rapport de couverture sur Codecov
      uses: codecov/codecov-action@v4.0.1
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: [tests_frontend, tests_backend]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        include:
          - path: 'frontend'
            full_image_name: ghcr.io/${{ github.repository }}/frontend
          - path: 'node-api'
            full_image_name: ghcr.io/${{ github.repository }}/node-api
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Mise en place de Buildx
        uses: docker/setup-buildx-action@v3

      - name: Récupération des métadonnées
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.full_image_name }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{sha}},enable=${{ github.ref_type != 'tag' }}

      - name: Login sur GitHub Package Registry
        uses: docker/login-action@v3
        if: ${{ github.ref_type == 'tag' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build et push
        uses: docker/build-push-action@v5
        with:
          #push: true
          #tags: ${{ matrix.full_image_name }}:latest
          context: ./${{ matrix.path }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event.base_ref =='refs/heads/master' && github.ref_type == 'tag' && !startsWith(github.ref, 'refs/tags/v0.')}}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

      # - name: Run Trivy vulnerability scanner to frontend image
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'ghcr.io/${{ github.repository }}/frontend'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      # - name: Run Trivy vulnerability scanner to backend image
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: 'ghcr.io/${{ github.repository }}/node-api'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

  e2e:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login sur GitHub Package Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lancement des tests E2E
        run: docker compose up --exit-code-from cypress --abort-on-container-exit
      
      - name: Nettoyage
        run: docker compose down -v --remove-orphans

  deploy-staging:
    needs: ["e2e"]
    environment: 
      name: staging
      url: http://${{ env.SERVER_STAGING_IP }}
    runs-on: ubuntu-latest
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: déployer sur le serveur de staging
      run: |
        eval $(ssh-agent -s)
        ssh-add - <<< "${{ secrets.VPS_KEY }}"
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.SERVER_STAGING_IP }} >> ~/.ssh/known_hosts
        scp docker-compose.production.yml ${{ env.SERVER_STAGING_USER }}@${{ env.SERVER_STAGING_IP }}:/root/docker-compose.production.yml
        ssh ${{ env.SERVER_STAGING_USER }}@${{ env.SERVER_STAGING_IP }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} && docker compose -f /root/docker-compose.production.yml up -d --force-recreate"

  deploy-production:
    needs: ["e2e"]
    environment: 
      name: production
      url: http://${{ env.SERVER_PRODUCTION_IP }}
    runs-on: ubuntu-latest
    if: github.ref == 'ref/heads/master'
    steps:
    - name: checkout le code
      uses: actions/checkout@v4

    - name: déployer sur le serveur de production
      run: |
        eval $(ssh-agent -s)
        ssh-add - <<< "${{ secrets.VPS_KEY }}"
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ env.SERVER_PRODUCTION_IP }} >> ~/.ssh/known_hosts
        scp docker-compose.production.yml ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }}:/root/docker-compose.production.yml
        ssh ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} && docker compose -f /root/docker-compose.production.yml up -d --force-recreate"


    # - name:
    #   run: |
    #     eval $(ssh-agent -s)
    #     ssh-add - <<< "${{ secrets.VPS_KEY }}"
    #     mkdir -p ~/.ssh
    #     ssh-keyscan -H ${{ env.SERVER_PRODUCTION_IP }} >> ~/.ssh/known_hosts
    #     scp docker-compose.production.yml ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }}:/root/docker-compose.production.yml
    #     ssh ${{ env.SERVER_PRODUCTION_USER }}@${{ env.SERVER_PRODUCTION_IP }} "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} && docker compose -f /root/docker-compose.production.yml up -d --force-recreate"